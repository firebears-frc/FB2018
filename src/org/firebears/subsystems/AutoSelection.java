// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.firebears.subsystems;

import org.firebears.RobotMap;
import org.firebears.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class AutoSelection extends Subsystem {

	final String LEFT = "Left";
	final String RIGHT = "Right";
	final String MIDDLE = "Middle";
	final String SWITCH = "Switch";
	final String SCALE = "Scale";
	final char R = 'R';
	final char L = 'L';

	String side;
	String priority;
	Boolean shouldCross;

	public void getAuto() {

		String side = RobotMap.side;
		System.out.println(side);
		String priority = RobotMap.priority;
		System.out.println(priority);
		Boolean shouldCross = RobotMap.shouldCross;
		System.out.println(shouldCross);
		String gameData = DriverStation.getInstance().getGameSpecificMessage();

		// to-do = replace println's with auto commands
		switch (side) {

		// Robot on left side
		case LEFT:
			switch (priority) {

			// Scale as priority
			case SCALE:
				switch (gameData.charAt(1)) {

				// Scale on left
				case L:
					// Runs when robot on left, scale on left (works)
					System.out.println("Select auto: left side, left scale");
					break;

				// Scale on right
				case R:
					if (shouldCross) {
						// Runs when robot on left, scale on right and allowed to cross (works)
						System.out.println("Select auto: left side, right scale");
					} else {
						if (gameData.charAt(0) == L) {
							// Runs when robot on left, scale on right and cannot cross
							System.out.println("Select auto: left side, left switch");
						} else {
							// Runs when robot on left, switch & scale on right and cannot cross
							System.out.println("Select auto: cross auto line");
						}
					}
					break;
				}
				break;

			// Switch as priority
			case SWITCH:
				switch (gameData.charAt(0)) {

				// Switch on left
				case L:
					// Runs when robot on left, switch on left
					System.out.println("Select auto: left side, left switch");
					break;

				// Switch on right
				case R:
					if (shouldCross) {
						// Runs when robot on left, switch on right and allowed to cross
						System.out.println("Select auto: left side, right switch");
					} else {
						// Runs when robot on left, switch on right and cannot cross
						System.out.println("Select auto: cross auto line");
					}
					break;
				}
				break;
			}
			break;

		// Robot is middle
		case MIDDLE:
			switch (gameData.charAt(0)) {

			// Switch on left
			case L:
				// Runs when robot is middle, switch on left
				System.out.println("Select auto: middle, left switch");
				break;

			// Switch on right
			case R:
				// Runs when robot is middle, switch on right
				System.out.println("Select auto: middle, right switch");
				break;
			}
			break;

		// Robot on right side
		case RIGHT:
			switch (priority) {

			// Scale as priority
			case SCALE:
				switch (gameData.charAt(1)) {

				// Scale on right
				case R:
					// Runs when robot on right, scale on right
					System.out.println("Select auto: right side, right scale");
					break;

				// Scale on left
				case L:
					if (shouldCross) {
						// Runs when robot on right, scale on left and allowed to cross
						System.out.println("Select auto: right side, left scale");
					} else {
						if (gameData.charAt(0) == R) {
							// Runs when robot on right, scale on left and cannot cross
							System.out.println("Select auto: right side, right switch");
						} else {
							// Runs when robot on right, switch & scale on left and cannot cross
							System.out.println("Select auto: cross auto line");
						}
					}
					break;
				}
				break;

			// Switch as priority
			case SWITCH:
				System.out.println("Right side switch");
				switch (gameData.charAt(0)) {

				// Switch on right
				case R:
					// Runs when robot on right, switch on right
					System.out.println("Select auto: right side, right switch");
					break;

				// Switch on left
				case L:
					if (shouldCross) {
						// Runs when robot on right, switch on left and allowed to cross
						System.out.println("Select auto: right side, left switch");
					} else {
						// Runs when robot on right, switch on left and not allowed to cross
						System.out.println("Select auto: cross auto line");
					}
					break;
				}

			}
		}

	}

	@Override
	public void initDefaultCommand() {
	}

	@Override
	public void periodic() {
		// Put code here to be run every loop
	}
}
