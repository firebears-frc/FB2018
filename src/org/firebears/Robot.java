// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.firebears;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.CommandGroup;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.firebears.commands.*;
import org.firebears.commands.auto.DriveToDistanceCommand;
import org.firebears.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    Command autonomousCommand;
    SendableChooser<Command> chooser = new SendableChooser<>();

    public static OI oi;
    public static Vision vision;
    public static AutoSelection autoSelection;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Chassis chassis;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
        RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        chassis = new Chassis();
        autoSelection = new AutoSelection();

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();
        vision = new Vision();

        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

//        chooser.addDefault("Autonomous Command", new AutonomousCommand());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        SmartDashboard.putData("Auto mode", chooser);
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
//    	System.out.println("joytickbutton1: " + oi.joystick1.getRawButton(1));
//    	System.out.println("joytickYAxis: "+ oi.joystick1.getRawAxis(1));
    	System.out.println("joytickXAxis: "+ oi.joystick2.getRawAxis(2));

    	double joystick = oi.joystick2.getRawAxis(2);
    	
//    	if (joystick > .33) {
//    		RobotMap.side = "Right";
//    	}else if (joystick <-.33) {
//    		RobotMap.side = "Left";
//    	}else if (joystick >-.33 && joystick < .33) {
//    		RobotMap.side = "Middle";
//    	}
    	SmartDashboard.putString("Side", RobotMap.side);
 		SmartDashboard.putString("Priority", RobotMap.priority);
 		SmartDashboard.putBoolean("Cross", RobotMap.shouldCross);
    	
<<<<<<< HEAD
=======
    	Command selectedAuto = autoSelection.getAuto();
    	selectedAuto.start();
>>>>>>> c4604485bafa4504099933066d7784a7e94f6485
    	
//    	autoSelection.getAuto();
    	
<<<<<<< HEAD
//    	String gameData;
//    	gameData = DriverStation.getInstance().getGameSpecificMessage();
//    	System.out.println(gameData);
//    	
//        autonomousCommand = chooser.getSelected();
////    	autonomousCommand = new DriveToDistanceCommand(20);
//         //schedule the autonomous command (example)
=======
//        autonomousCommand = chooser.getSelected();
//        // schedule the autonomous command (example)
>>>>>>> c4604485bafa4504099933066d7784a7e94f6485
//        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
        
       
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
    	
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        
        // Put Encoder values
        SmartDashboard.putNumber("Left Encoder", RobotMap.encoderLeft.get());
		SmartDashboard.putNumber("Back Left Encoder Distance", RobotMap.chassisBackLeft.getSelectedSensorPosition(RobotMap.PID_IDX));
		SmartDashboard.putNumber("Back Left Encoder Rate", RobotMap.chassisBackLeft.getSelectedSensorVelocity(RobotMap.PID_IDX));
		SmartDashboard.putNumber("Front Left Encoder Distance", RobotMap.chassisFrontLeft.getSelectedSensorPosition(RobotMap.PID_IDX));
		SmartDashboard.putNumber("Front Left Encoder Rate", RobotMap.chassisFrontLeft.getSelectedSensorVelocity(RobotMap.PID_IDX));
		
		SmartDashboard.putNumber("Right Encoder", RobotMap.encoderRight.get());
		SmartDashboard.putNumber("Back Right Encoder Distance", RobotMap.chassisBackRight.getSelectedSensorPosition(RobotMap.PID_IDX));
		SmartDashboard.putNumber("Back Right Encoder Rate", RobotMap.chassisBackRight.getSelectedSensorVelocity(RobotMap.PID_IDX));
		SmartDashboard.putNumber("Front Right Encoder Distance", RobotMap.chassisFrontRight.getSelectedSensorPosition(RobotMap.PID_IDX));
		SmartDashboard.putNumber("Front Right Encoder Rate", RobotMap.chassisFrontRight.getSelectedSensorVelocity(RobotMap.PID_IDX));
		
		SmartDashboard.putNumber("DistanceInInches", Robot.chassis.getRangeFinderDistance());
		SmartDashboard.putNumber("NavX Angle", RobotMap.boundAngle(RobotMap.getNavXAngle()));
		
		SmartDashboard.putBoolean("TapeSensor", Robot.chassis.isTapeBright());
//		System.out.println("Tape Sensor: " + RobotMap.tape.get());
		
		SmartDashboard.putBoolean("Closed_LOOP", RobotMap.CLOSED_LOOP_DRIVING);
		SmartDashboard.putString("ControlMode", RobotMap.chassisFrontLeft.getControlMode().toString());
		
		

    }
}
