// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

//
//test
package org.firebears;

import org.firebears.commands.CelebrateCommand;
import org.firebears.commands.I2CCommand;
import org.firebears.commands.PlayMirroredRecording;
import org.firebears.commands.PlayRecordingCommand;
import org.firebears.commands.StartRecordingCommand;
import org.firebears.commands.StopRecordingCommand;
import org.firebears.commands.TestRobotCommand;
import org.firebears.commands.VisionForwardCommand;
import org.firebears.commands.VisionGetCubeCommandGroup;
import org.firebears.commands.VisionRotateCommand;
import org.firebears.commands.auto.ChangePriority;
import org.firebears.commands.auto.ChangeShouldCross;
import org.firebears.commands.auto.ChangeSide;
import org.firebears.commands.auto.DriveToDistanceCommand;
import org.firebears.commands.auto.DriveToTapeCommand;
import org.firebears.commands.auto.RotateToAngle;
import org.firebears.commands.grabber.OpenGrabberCommand;
import org.firebears.commands.grabber.RaiseGrabberCommand;
import org.firebears.commands.grabber.SpinGrabberWheelsCommand;
import org.firebears.commands.shooter.ExtendShooterCommand;
import org.firebears.commands.shooter.SpinShooterWheelsCommand;
import org.firebears.util.RobotReport;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {

    public Joystick joystick1;
    public Joystick joystick2;
    public JoystickButton testPID;
    public JoystickButton Driveinches;
    public JoystickButton celebrateButton;

    String testRecording = "recordings/test.csv";

    public OI(RobotReport report) {
	// Intialize the joysticks
	joystick1 = new Joystick(0);
	report.addJoystick(0, "Joystick 1", joystick1);

	joystick2 = new Joystick(1);

	// Driveinches = new JoystickButton(joystick1,1);
	// Driveinches.whileHeld(new DriveToDistanceCommand(18.8));

	report.addJoystick(1, "Joystick 2", joystick2);

	// Joystick Buttons

	// Switch between Open and Closed Loop Driving
	// testPID = new JoystickButton(joystick1, 1);
	// Command switchDriving = new SwitchDrivingType();
	// testPID.whenPressed(new SwitchDrivingType());
	// report.addJoystickButton(0, 1, "Swtich Driving Type", switchDriving);
celebrateButton = new JoystickButton(joystick1, 9);
celebrateButton.whileHeld(new CelebrateCommand());
	
	// SmartDashboard Buttons
	// Recording Commands
	if (RobotMap.DEBUG) {
	    SmartDashboard.putData("Start Recording", new StartRecordingCommand());
	    SmartDashboard.putData("Stop Recording", new StopRecordingCommand());
	    SmartDashboard.putData("Play Recording", new PlayRecordingCommand());
	    SmartDashboard.putData("Play Recording Mirrored", new PlayMirroredRecording());
	    SmartDashboard.putData("Test Recording", new PlayRecordingCommand(testRecording));
	    SmartDashboard.putData("Mirror Test Recording", new PlayMirroredRecording(testRecording));
	    
	    // Vision Commands
	    SmartDashboard.putData("Vision Turn", new VisionRotateCommand());
	    SmartDashboard.putData("Drive to Cube", new VisionForwardCommand());
	    SmartDashboard.putData("Vision Get Cube", new VisionGetCubeCommandGroup());

	    // Other Commands
	    SmartDashboard.putData("DriveToTapeCommand", new DriveToTapeCommand(.4));
	    SmartDashboard.putData("DriveInches", new DriveToDistanceCommand(60, .6));
	    SmartDashboard.putData("RotateToAngle", new RotateToAngle(45));
	    // SmartDashboard.putData("Nullzone Command",new DriveIntoNullZoneCommand());
	    
	   SmartDashboard.putData("Extend Shooter", new ExtendShooterCommand(true));
	   SmartDashboard.putData("Retract Shooter", new ExtendShooterCommand(false));
	   SmartDashboard.putData("Spin Shooter Wheels Fast", new SpinShooterWheelsCommand(Robot.shooter.HIGH_SPEED));
	   SmartDashboard.putData("Spin Shooter Wheels Slow", new SpinShooterWheelsCommand(Robot.shooter.LOW_SPEED));
	   SmartDashboard.putData("Stop Shooter Wheels", new SpinShooterWheelsCommand(0));
	   
	   SmartDashboard.putData("Open Grabber", new OpenGrabberCommand(true));
	   SmartDashboard.putData("Close Grabber", new OpenGrabberCommand(false));
	   SmartDashboard.putData("Raise Grabber", new RaiseGrabberCommand(true));
	   SmartDashboard.putData("Lower Grabber", new RaiseGrabberCommand(false));
	   SmartDashboard.putData("Spin Grabber Wheels", new SpinGrabberWheelsCommand(true));
	   SmartDashboard.putData("Stop Grabber Wheels", new SpinGrabberWheelsCommand(false));

	}
	// Auto commands
	SmartDashboard.putData("Left side", new ChangeSide("Left"));
	SmartDashboard.putData("Middle", new ChangeSide("Middle"));
	SmartDashboard.putData("Right side", new ChangeSide("Right"));
	SmartDashboard.putData("Scale priority", new ChangePriority("Scale"));
	SmartDashboard.putData("Switch priority", new ChangePriority("Switch"));
	SmartDashboard.putData("Should cross", new ChangeShouldCross(true));
	SmartDashboard.putData("Shouldn't cross", new ChangeShouldCross(false));

	SmartDashboard.putData("setAnimation", new I2CCommand(1, 3));
	SmartDashboard.putData("TEST", new TestRobotCommand());

    }

    public Joystick getJoystick1() {
	return joystick1;
    }

}
