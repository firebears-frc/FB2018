// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.firebears;

import com.ctre.phoenix.motorcontrol.ControlMode;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public static WPI_TalonSRX chassisFrontLeft;
	public static WPI_TalonSRX chassisRearLeft;
	public static SpeedControllerGroup chassisLeftMotors;
	public static WPI_TalonSRX chassisFrontRight;
	public static WPI_TalonSRX chassisRearRight;
	public static SpeedControllerGroup chassisRightMotors;
	public static DifferentialDrive chassisRobotDrive;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	public static void init() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		chassisFrontLeft = new CANTalon(2);

		chassisRearLeft = new CANTalon(3);

		chassisLeftMotors = new SpeedControllerGroup(chassisFrontLeft, chassisRearLeft);
//		LiveWindow.addActuator("Chassis", "LeftMotors", chassisLeftMotors);

		chassisFrontRight = new CANTalon(4);

		chassisRearRight = new CANTalon(5);

		chassisRightMotors = new SpeedControllerGroup(chassisFrontRight, chassisRearRight);
//		LiveWindow.addActuator("Chassis", "RightMotors", chassisRightMotors);

		chassisRobotDrive = new DifferentialDrive(chassisLeftMotors, chassisRightMotors);
//		LiveWindow.addActuator("Chassis", "RobotDrive", chassisRobotDrive);
		chassisRobotDrive.setSafetyEnabled(true);
		chassisRobotDrive.setExpiration(0.1);
		chassisRobotDrive.setMaxOutput(1.0);

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	}

	static class CANTalon extends WPI_TalonSRX {

		int encoderMultiplier = 1;

		public CANTalon(int deviceNumber) {
			super(deviceNumber);
		}

		@Override
		public void set(double speed) {
			if (encoderMultiplier > 1) {
				set(ControlMode.Velocity, speed * encoderMultiplier);
			} else {
				set(ControlMode.PercentOutput, speed);
			}
		}

		@Override
		public String toString() {
			return "CANTalon(" + getDeviceID() + ")";
		}

		public void configEncoderCodesPerRev(int ticks) {
			this.encoderMultiplier = ticks;
		}
	}
}
